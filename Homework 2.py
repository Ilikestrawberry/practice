{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Homework 2.py","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyM5OSf+wtU3YG/HNvisha7Y"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"-Yc_EjCucafk","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1614747129728,"user_tz":-540,"elapsed":32897,"user":{"displayName":"성균관대정지훈","photoUrl":"","userId":"14089599347549052767"}},"outputId":"91db3616-0ceb-4450-edca-60ddec29d66d"},"source":["## Probability of Flush set\n","\n","import pandas as pd\n","import numpy as np\n","import random\n","\n","Shapes = ['♥', '♠', '♣', '♦']\n","Numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n","Deck = []\n","\n","for Number in Numbers:\n","  if Number == 11:\n","    Number = 'J'\n","  elif Number == 12:\n","    Number = 'Q'\n","  elif Number == 13:\n","    Number = 'K'\n","  for Shape in Shapes:\n","    DrawCard = [Number, Shape]\n","    Deck.append(DrawCard)\n","\n","print(Deck)\n","print(len(Deck))\n","\n","DrawAll = []\n","FlushSet = 0\n","\n","for i in range(1, 5000000):\n","  DrawFive = random.sample(Deck, k=5)\n","  if DrawFive[0][1] == DrawFive[1][1] == DrawFive[2][1] == DrawFive[3][1] == DrawFive[4][1]:\n","    FlushSet += 1\n","  DrawAll.append(DrawFive)\n","\n","df = pd.DataFrame(DrawAll, columns = ['1','2','3','4','5'])\n","print(df)\n","prob_flush = FlushSet / len(DrawAll)\n","print(prob_flush)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[[1, '♥'], [1, '♠'], [1, '♣'], [1, '♦'], [2, '♥'], [2, '♠'], [2, '♣'], [2, '♦'], [3, '♥'], [3, '♠'], [3, '♣'], [3, '♦'], [4, '♥'], [4, '♠'], [4, '♣'], [4, '♦'], [5, '♥'], [5, '♠'], [5, '♣'], [5, '♦'], [6, '♥'], [6, '♠'], [6, '♣'], [6, '♦'], [7, '♥'], [7, '♠'], [7, '♣'], [7, '♦'], [8, '♥'], [8, '♠'], [8, '♣'], [8, '♦'], [9, '♥'], [9, '♠'], [9, '♣'], [9, '♦'], [10, '♥'], [10, '♠'], [10, '♣'], [10, '♦'], ['J', '♥'], ['J', '♠'], ['J', '♣'], ['J', '♦'], ['Q', '♥'], ['Q', '♠'], ['Q', '♣'], ['Q', '♦'], ['K', '♥'], ['K', '♠'], ['K', '♣'], ['K', '♦']]\n","52\n","              1        2        3        4        5\n","0        [Q, ♣]  [10, ♦]   [2, ♣]   [7, ♦]   [2, ♠]\n","1        [8, ♥]   [5, ♥]   [8, ♣]   [8, ♠]   [3, ♣]\n","2        [1, ♠]   [1, ♥]   [1, ♣]   [Q, ♠]   [3, ♦]\n","3        [6, ♠]   [2, ♥]   [8, ♠]   [Q, ♣]   [3, ♦]\n","4        [6, ♥]   [9, ♠]   [8, ♦]   [J, ♠]   [7, ♦]\n","...         ...      ...      ...      ...      ...\n","4999994  [8, ♦]   [5, ♣]  [10, ♣]   [8, ♠]   [5, ♥]\n","4999995  [K, ♣]   [Q, ♥]   [Q, ♣]   [8, ♥]  [10, ♦]\n","4999996  [K, ♠]   [7, ♦]  [10, ♥]  [10, ♠]   [2, ♦]\n","4999997  [J, ♣]   [3, ♥]   [9, ♦]   [Q, ♠]   [K, ♦]\n","4999998  [8, ♥]   [2, ♣]   [1, ♠]   [J, ♣]   [J, ♦]\n","\n","[4999999 rows x 5 columns]\n","0.0019878003975600795\n"],"name":"stdout"}]}]}